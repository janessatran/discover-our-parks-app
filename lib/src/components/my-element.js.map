{"version":3,"file":"my-element.js","sourceRoot":"","sources":["../../../src/components/my-element.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,IAAI,EAAkB,MAAM,KAAK,CAAC;AAC3C,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AAEjD,OAAO,EAAE,YAAY,EAAE,MAAM,wBAAwB,CAAC;AACtD,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAElD,qEAAqE;AACrE,wHAAwH;AAEjH,IAAM,SAAS,GAAf,MAAM,SAAU,SAAQ,cAAc;IAAtC;;QACG,YAAO,GAAG,IAAI,YAAY,EAAE,CAAC;IAqBvC,CAAC;IAnBQ,YAAY;QACjB,kCAAkC;QAClC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,CAAC,iBAAiB;IAC7C,CAAC;IAEO,cAAc;QACpB,gDAAgD;QAChD,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,CAAC,qBAAqB;IACjD,CAAC;IAED,2EAA2E;IACpE,MAAM;QACX,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QACtC,OAAO,IAAI,CAAA;iBACE,IAAI,CAAC,OAAO,CAAC,KAAK;;uBAEZ,IAAI,CAAC,cAAc;KACrC,CAAC;IACJ,CAAC;CACF,CAAA;AAtBY,SAAS;IADrB,aAAa,CAAC,YAAY,CAAC;GACf,SAAS,CAsBrB","sourcesContent":["import { html, TemplateResult } from \"lit\";\nimport { MobxLitElement } from \"@adobe/lit-mobx\";\n\nimport { CounterStore } from \"../stores/CounterStore\";\nimport { customElement } from \"lit/decorators.js\";\n\n// create a new custom element, and use the base MobxLitElement class\n// alternatively you can use the MobxReactionUpdate mixin, e.g. `class MyElement extends MobxReactionUpdate(LitElement)`\n@customElement(\"my-element\")\nexport class MyElement extends MobxLitElement {\n  private counter = new CounterStore();\n\n  public firstUpdated() {\n    // you can update in first updated\n    this.counter.increment(); // value is now 1\n  }\n\n  private incrementCount() {\n    // and you can trigger change in event callbacks\n    this.counter.increment(); // value is now n + 1\n  }\n\n  // any observables accessed in the render method will now trigger an update\n  public render(): TemplateResult {\n    console.log(\"JT DEBUG: re-rendering\");\n    return html`\n      Count is ${this.counter.count}\n      <br />\n      <button @click=${this.incrementCount}>Add</button>\n    `;\n  }\n}\n"]}